// Generated by LiveScript 1.5.0
/**
 * @package Detox DHT
 * @author  Nazar Mokrynskyi <nazar@mokrynskyi.com>
 * @license 0BSD
 */
(function(){
  function Wrapper(asyncEventer, esDht){
    /**
     * @constructor
     *
     * @param {!Uint8Array}	id									Own ID
     * @param {!Function}	hash_function						Hash function to be used for Merkle Tree
     * @param {number}		bucket_size							Size of a bucket from Kademlia design
     * @param {number}		state_history_size					How many versions of local history will be kept
     * @param {number}		fraction_of_nodes_from_same_peer	Max fraction of nodes originated from single peer allowed on lookup start
     *
     * @return {!DHT}
     */
    function DHT(id, hash_function, bucket_size, state_history_size, fraction_of_nodes_from_same_peer){
      fraction_of_nodes_from_same_peer == null && (fraction_of_nodes_from_same_peer = 0.2);
      if (!(this instanceof DHT)) {
        return new DHT(id, hash_function, bucket_size, state_history_size, fraction_of_nodes_from_same_peer);
      }
      asyncEventer.call(this);
    }
    DHT.prototype = {
      /**
       * @param {string}	ip
       * @param {number}	port
       */
      'listen': function(ip, port){}
      /**
       * @param {!Uint8Array} id
       *
       * @return {!Promise}
       */,
      'lookup': function(id){}
      /**
       * @return {!Array<!Uint8Array>}
       */,
      'get_peers': function(){}
      /**
       * @param {!Uint8Array} key
       *
       * @return {!Promise}
       */,
      'get': function(key){}
      /**
       * @param {!Uint8Array} data
       *
       * @return {!Uint8Array} Key
       */,
      'put_immutable': function(data){}
      /**
       * @param {!Uint8Array} public_key
       * @param {!Uint8Array} data
       * @param {!Uint8Array} signature
       */,
      'put_mutable': function(public_key, data, signature){},
      'destroy': function(){}
    };
    DHT.prototype = Object.assign(Object.create(asyncEventer.prototype), DHT.prototype);
    Object.defineProperty(DHT.prototype, 'constructor', {
      value: DHT
    });
    return DHT;
  }
  if (typeof define === 'function' && define['amd']) {
    define(['async-eventer', 'es-dht'], Wrapper);
  } else if (typeof exports === 'object') {
    module.exports = Wrapper(require('async-eventer'), require('es-dht'));
  } else {
    this['detox_dht'] = Wrapper(this['async_eventer'], this['es_dht']);
  }
}).call(this);
