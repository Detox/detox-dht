// Generated by LiveScript 1.5.0
/**
 * @package Detox DHT
 * @author  Nazar Mokrynskyi <nazar@mokrynskyi.com>
 * @license 0BSD
 */
(function(){
  var detoxUtils, lib, test;
  detoxUtils = require('@detox/utils');
  lib = require('..');
  test = require('tape');
  lib.ready(function(){
    var ArrayMap, random_bytes;
    ArrayMap = detoxUtils.ArrayMap;
    random_bytes = detoxUtils.random_bytes;
    test('Detox DHT', function(t){
      var instances, nodes, bootstrap_node_id, bootstrap_node_instance, i$, node_a, node_b, node_c, data, ref$, key;
      t.plan(3);
      console.log('Creating instances...');
      function DHT(id){
        return lib.DHT(id, 20, 1000, 1000).on('send', function(target_id, command, payload){
          instances.get(target_id).receive(id, command, payload);
        });
      }
      instances = ArrayMap();
      nodes = [];
      bootstrap_node_id = random_bytes(32);
      bootstrap_node_instance = DHT(bootstrap_node_id);
      instances.set(bootstrap_node_id, bootstrap_node_instance);
      for (i$ = 0; i$ < 100; ++i$) {
        (fn$.call(this, i$));
      }
      console.log('Warm-up...');
      node_a = instances.get(nodes[Math.round(nodes.length * Math.random())]);
      node_b = instances.get(nodes[Math.round(nodes.length * Math.random())]);
      node_c = instances.get(nodes[Math.round(nodes.length * Math.random())]);
      data = random_bytes(10);
      ref$ = node_a.make_immutable_value(data), key = ref$[0], data = ref$[1];
      node_a.put_value(key, data);
      function destroy(){
        instances.forEach(function(instance){
          instance.destroy();
        });
      }
      node_a.get_value(key).then(function(value){
        t.equal(value.join(','), data.join(','), 'getting immutable data on node a succeeded');
        return node_b.get_value(key);
      }).then(function(value){
        t.equal(value.join(','), data.join(','), 'getting immutable data on node b succeeded');
        return node_c.get_value(key);
      }).then(function(value){
        t.equal(value.join(','), data.join(','), 'getting immutable data on node c succeeded');
        destroy();
      })['catch'](function(e){
        if (e) {
          console.error(e);
        }
        destroy();
      });
      function fn$(_){
        var id, instance;
        id = random_bytes(32);
        instance = DHT(id);
        nodes.push(id);
        instances.set(id, instance);
        instance.set_peer(bootstrap_node_id, bootstrap_node_instance.get_state());
      }
    });
  });
}).call(this);
